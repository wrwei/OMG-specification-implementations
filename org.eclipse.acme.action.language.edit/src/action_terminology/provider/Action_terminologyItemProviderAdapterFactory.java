/**
 */
package action_terminology.provider;

import action_terminology.util.Action_terminologyAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Action_terminologyItemProviderAdapterFactory extends Action_terminologyAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Action_terminologyItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_terminology.TerminologyActionPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminologyActionPackageItemProvider terminologyActionPackageItemProvider;

	/**
	 * This creates an adapter for a {@link action_terminology.TerminologyActionPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTerminologyActionPackageAdapter() {
		if (terminologyActionPackageItemProvider == null) {
			terminologyActionPackageItemProvider = new TerminologyActionPackageItemProvider(this);
		}

		return terminologyActionPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_terminology.CreateTerminologyPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateTerminologyPackageItemProvider createTerminologyPackageItemProvider;

	/**
	 * This creates an adapter for a {@link action_terminology.CreateTerminologyPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateTerminologyPackageAdapter() {
		if (createTerminologyPackageItemProvider == null) {
			createTerminologyPackageItemProvider = new CreateTerminologyPackageItemProvider(this);
		}

		return createTerminologyPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_terminology.CreateTerminologyPackageInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateTerminologyPackageInterfaceItemProvider createTerminologyPackageInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link action_terminology.CreateTerminologyPackageInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateTerminologyPackageInterfaceAdapter() {
		if (createTerminologyPackageInterfaceItemProvider == null) {
			createTerminologyPackageInterfaceItemProvider = new CreateTerminologyPackageInterfaceItemProvider(this);
		}

		return createTerminologyPackageInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_terminology.CreateTerminologyPackageBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateTerminologyPackageBindingItemProvider createTerminologyPackageBindingItemProvider;

	/**
	 * This creates an adapter for a {@link action_terminology.CreateTerminologyPackageBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateTerminologyPackageBindingAdapter() {
		if (createTerminologyPackageBindingItemProvider == null) {
			createTerminologyPackageBindingItemProvider = new CreateTerminologyPackageBindingItemProvider(this);
		}

		return createTerminologyPackageBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_terminology.CreateTerminologyPackageGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateTerminologyPackageGroupItemProvider createTerminologyPackageGroupItemProvider;

	/**
	 * This creates an adapter for a {@link action_terminology.CreateTerminologyPackageGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateTerminologyPackageGroupAdapter() {
		if (createTerminologyPackageGroupItemProvider == null) {
			createTerminologyPackageGroupItemProvider = new CreateTerminologyPackageGroupItemProvider(this);
		}

		return createTerminologyPackageGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_terminology.UpdateArtifactElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateArtifactElementItemProvider updateArtifactElementItemProvider;

	/**
	 * This creates an adapter for a {@link action_terminology.UpdateArtifactElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateArtifactElementAdapter() {
		if (updateArtifactElementItemProvider == null) {
			updateArtifactElementItemProvider = new UpdateArtifactElementItemProvider(this);
		}

		return updateArtifactElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_terminology.DeleteArtifactElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteArtifactElementItemProvider deleteArtifactElementItemProvider;

	/**
	 * This creates an adapter for a {@link action_terminology.DeleteArtifactElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteArtifactElementAdapter() {
		if (deleteArtifactElementItemProvider == null) {
			deleteArtifactElementItemProvider = new DeleteArtifactElementItemProvider(this);
		}

		return deleteArtifactElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_terminology.CreateCategory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateCategoryItemProvider createCategoryItemProvider;

	/**
	 * This creates an adapter for a {@link action_terminology.CreateCategory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateCategoryAdapter() {
		if (createCategoryItemProvider == null) {
			createCategoryItemProvider = new CreateCategoryItemProvider(this);
		}

		return createCategoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_terminology.CreateExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateExpressionItemProvider createExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link action_terminology.CreateExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateExpressionAdapter() {
		if (createExpressionItemProvider == null) {
			createExpressionItemProvider = new CreateExpressionItemProvider(this);
		}

		return createExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_terminology.CreateTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateTermItemProvider createTermItemProvider;

	/**
	 * This creates an adapter for a {@link action_terminology.CreateTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateTermAdapter() {
		if (createTermItemProvider == null) {
			createTermItemProvider = new CreateTermItemProvider(this);
		}

		return createTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_terminology.UpdateExpressionElementCategory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateExpressionElementCategoryItemProvider updateExpressionElementCategoryItemProvider;

	/**
	 * This creates an adapter for a {@link action_terminology.UpdateExpressionElementCategory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateExpressionElementCategoryAdapter() {
		if (updateExpressionElementCategoryItemProvider == null) {
			updateExpressionElementCategoryItemProvider = new UpdateExpressionElementCategoryItemProvider(this);
		}

		return updateExpressionElementCategoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_terminology.UpdateExpressionElementValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateExpressionElementValueItemProvider updateExpressionElementValueItemProvider;

	/**
	 * This creates an adapter for a {@link action_terminology.UpdateExpressionElementValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateExpressionElementValueAdapter() {
		if (updateExpressionElementValueItemProvider == null) {
			updateExpressionElementValueItemProvider = new UpdateExpressionElementValueItemProvider(this);
		}

		return updateExpressionElementValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_terminology.UpdateExpressionElementExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateExpressionElementExpressionItemProvider updateExpressionElementExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link action_terminology.UpdateExpressionElementExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateExpressionElementExpressionAdapter() {
		if (updateExpressionElementExpressionItemProvider == null) {
			updateExpressionElementExpressionItemProvider = new UpdateExpressionElementExpressionItemProvider(this);
		}

		return updateExpressionElementExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_terminology.updateTermExternalReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected updateTermExternalReferenceItemProvider updateTermExternalReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link action_terminology.updateTermExternalReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createupdateTermExternalReferenceAdapter() {
		if (updateTermExternalReferenceItemProvider == null) {
			updateTermExternalReferenceItemProvider = new updateTermExternalReferenceItemProvider(this);
		}

		return updateTermExternalReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_terminology.UpdateTermOrigin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateTermOriginItemProvider updateTermOriginItemProvider;

	/**
	 * This creates an adapter for a {@link action_terminology.UpdateTermOrigin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateTermOriginAdapter() {
		if (updateTermOriginItemProvider == null) {
			updateTermOriginItemProvider = new UpdateTermOriginItemProvider(this);
		}

		return updateTermOriginItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (terminologyActionPackageItemProvider != null) terminologyActionPackageItemProvider.dispose();
		if (createTerminologyPackageItemProvider != null) createTerminologyPackageItemProvider.dispose();
		if (createTerminologyPackageInterfaceItemProvider != null) createTerminologyPackageInterfaceItemProvider.dispose();
		if (createTerminologyPackageBindingItemProvider != null) createTerminologyPackageBindingItemProvider.dispose();
		if (createTerminologyPackageGroupItemProvider != null) createTerminologyPackageGroupItemProvider.dispose();
		if (updateArtifactElementItemProvider != null) updateArtifactElementItemProvider.dispose();
		if (deleteArtifactElementItemProvider != null) deleteArtifactElementItemProvider.dispose();
		if (createCategoryItemProvider != null) createCategoryItemProvider.dispose();
		if (createExpressionItemProvider != null) createExpressionItemProvider.dispose();
		if (createTermItemProvider != null) createTermItemProvider.dispose();
		if (updateExpressionElementCategoryItemProvider != null) updateExpressionElementCategoryItemProvider.dispose();
		if (updateExpressionElementValueItemProvider != null) updateExpressionElementValueItemProvider.dispose();
		if (updateExpressionElementExpressionItemProvider != null) updateExpressionElementExpressionItemProvider.dispose();
		if (updateTermExternalReferenceItemProvider != null) updateTermExternalReferenceItemProvider.dispose();
		if (updateTermOriginItemProvider != null) updateTermOriginItemProvider.dispose();
	}

}
