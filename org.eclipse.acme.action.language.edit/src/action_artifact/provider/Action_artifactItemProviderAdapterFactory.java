/**
 */
package action_artifact.provider;

import action_artifact.util.Action_artifactAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Action_artifactItemProviderAdapterFactory extends Action_artifactAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Action_artifactItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.ArtifactActionPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArtifactActionPackageItemProvider artifactActionPackageItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.ArtifactActionPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArtifactActionPackageAdapter() {
		if (artifactActionPackageItemProvider == null) {
			artifactActionPackageItemProvider = new ArtifactActionPackageItemProvider(this);
		}

		return artifactActionPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.CreateArtifactPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateArtifactPackageItemProvider createArtifactPackageItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.CreateArtifactPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateArtifactPackageAdapter() {
		if (createArtifactPackageItemProvider == null) {
			createArtifactPackageItemProvider = new CreateArtifactPackageItemProvider(this);
		}

		return createArtifactPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.CreateArtifactPackageInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateArtifactPackageInterfaceItemProvider createArtifactPackageInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.CreateArtifactPackageInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateArtifactPackageInterfaceAdapter() {
		if (createArtifactPackageInterfaceItemProvider == null) {
			createArtifactPackageInterfaceItemProvider = new CreateArtifactPackageInterfaceItemProvider(this);
		}

		return createArtifactPackageInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.CreateArtifactPackageBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateArtifactPackageBindingItemProvider createArtifactPackageBindingItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.CreateArtifactPackageBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateArtifactPackageBindingAdapter() {
		if (createArtifactPackageBindingItemProvider == null) {
			createArtifactPackageBindingItemProvider = new CreateArtifactPackageBindingItemProvider(this);
		}

		return createArtifactPackageBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.CreateArtifactPackageGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateArtifactPackageGroupItemProvider createArtifactPackageGroupItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.CreateArtifactPackageGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateArtifactPackageGroupAdapter() {
		if (createArtifactPackageGroupItemProvider == null) {
			createArtifactPackageGroupItemProvider = new CreateArtifactPackageGroupItemProvider(this);
		}

		return createArtifactPackageGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.UpdateArtifactElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateArtifactElementItemProvider updateArtifactElementItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.UpdateArtifactElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateArtifactElementAdapter() {
		if (updateArtifactElementItemProvider == null) {
			updateArtifactElementItemProvider = new UpdateArtifactElementItemProvider(this);
		}

		return updateArtifactElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.DeleteArtifactElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteArtifactElementItemProvider deleteArtifactElementItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.DeleteArtifactElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteArtifactElementAdapter() {
		if (deleteArtifactElementItemProvider == null) {
			deleteArtifactElementItemProvider = new DeleteArtifactElementItemProvider(this);
		}

		return deleteArtifactElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.CreateArtifact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateArtifactItemProvider createArtifactItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.CreateArtifact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateArtifactAdapter() {
		if (createArtifactItemProvider == null) {
			createArtifactItemProvider = new CreateArtifactItemProvider(this);
		}

		return createArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.CreateActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateActivityItemProvider createActivityItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.CreateActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateActivityAdapter() {
		if (createActivityItemProvider == null) {
			createActivityItemProvider = new CreateActivityItemProvider(this);
		}

		return createActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.CreateEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateEventItemProvider createEventItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.CreateEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateEventAdapter() {
		if (createEventItemProvider == null) {
			createEventItemProvider = new CreateEventItemProvider(this);
		}

		return createEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.CreateParticipant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateParticipantItemProvider createParticipantItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.CreateParticipant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateParticipantAdapter() {
		if (createParticipantItemProvider == null) {
			createParticipantItemProvider = new CreateParticipantItemProvider(this);
		}

		return createParticipantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.CreateTechnique} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateTechniqueItemProvider createTechniqueItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.CreateTechnique}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateTechniqueAdapter() {
		if (createTechniqueItemProvider == null) {
			createTechniqueItemProvider = new CreateTechniqueItemProvider(this);
		}

		return createTechniqueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.CreateResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateResourceItemProvider createResourceItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.CreateResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateResourceAdapter() {
		if (createResourceItemProvider == null) {
			createResourceItemProvider = new CreateResourceItemProvider(this);
		}

		return createResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.CreateProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreatePropertyItemProvider createPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.CreateProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreatePropertyAdapter() {
		if (createPropertyItemProvider == null) {
			createPropertyItemProvider = new CreatePropertyItemProvider(this);
		}

		return createPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.CreateArtifactAssetRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateArtifactAssetRelationshipItemProvider createArtifactAssetRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.CreateArtifactAssetRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateArtifactAssetRelationshipAdapter() {
		if (createArtifactAssetRelationshipItemProvider == null) {
			createArtifactAssetRelationshipItemProvider = new CreateArtifactAssetRelationshipItemProvider(this);
		}

		return createArtifactAssetRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.UpdatePropertyPurpose} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdatePropertyPurposeItemProvider updatePropertyPurposeItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.UpdatePropertyPurpose}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdatePropertyPurposeAdapter() {
		if (updatePropertyPurposeItemProvider == null) {
			updatePropertyPurposeItemProvider = new UpdatePropertyPurposeItemProvider(this);
		}

		return updatePropertyPurposeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.UpdateArtifactAssetRelationshipSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateArtifactAssetRelationshipSourceItemProvider updateArtifactAssetRelationshipSourceItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.UpdateArtifactAssetRelationshipSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateArtifactAssetRelationshipSourceAdapter() {
		if (updateArtifactAssetRelationshipSourceItemProvider == null) {
			updateArtifactAssetRelationshipSourceItemProvider = new UpdateArtifactAssetRelationshipSourceItemProvider(this);
		}

		return updateArtifactAssetRelationshipSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.UpdateArtifactAssetRelationshipTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateArtifactAssetRelationshipTargetItemProvider updateArtifactAssetRelationshipTargetItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.UpdateArtifactAssetRelationshipTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateArtifactAssetRelationshipTargetAdapter() {
		if (updateArtifactAssetRelationshipTargetItemProvider == null) {
			updateArtifactAssetRelationshipTargetItemProvider = new UpdateArtifactAssetRelationshipTargetItemProvider(this);
		}

		return updateArtifactAssetRelationshipTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.UpdateArtifactVersion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateArtifactVersionItemProvider updateArtifactVersionItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.UpdateArtifactVersion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateArtifactVersionAdapter() {
		if (updateArtifactVersionItemProvider == null) {
			updateArtifactVersionItemProvider = new UpdateArtifactVersionItemProvider(this);
		}

		return updateArtifactVersionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.UpdateArtifactDate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateArtifactDateItemProvider updateArtifactDateItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.UpdateArtifactDate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateArtifactDateAdapter() {
		if (updateArtifactDateItemProvider == null) {
			updateArtifactDateItemProvider = new UpdateArtifactDateItemProvider(this);
		}

		return updateArtifactDateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.UpdateActivityStartTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateActivityStartTimeItemProvider updateActivityStartTimeItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.UpdateActivityStartTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateActivityStartTimeAdapter() {
		if (updateActivityStartTimeItemProvider == null) {
			updateActivityStartTimeItemProvider = new UpdateActivityStartTimeItemProvider(this);
		}

		return updateActivityStartTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.UpdateActivityEndTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateActivityEndTimeItemProvider updateActivityEndTimeItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.UpdateActivityEndTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateActivityEndTimeAdapter() {
		if (updateActivityEndTimeItemProvider == null) {
			updateActivityEndTimeItemProvider = new UpdateActivityEndTimeItemProvider(this);
		}

		return updateActivityEndTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link action_artifact.UpdateResourceOccurence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateResourceOccurenceItemProvider updateResourceOccurenceItemProvider;

	/**
	 * This creates an adapter for a {@link action_artifact.UpdateResourceOccurence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateResourceOccurenceAdapter() {
		if (updateResourceOccurenceItemProvider == null) {
			updateResourceOccurenceItemProvider = new UpdateResourceOccurenceItemProvider(this);
		}

		return updateResourceOccurenceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (artifactActionPackageItemProvider != null) artifactActionPackageItemProvider.dispose();
		if (createArtifactPackageItemProvider != null) createArtifactPackageItemProvider.dispose();
		if (createArtifactPackageInterfaceItemProvider != null) createArtifactPackageInterfaceItemProvider.dispose();
		if (createArtifactPackageBindingItemProvider != null) createArtifactPackageBindingItemProvider.dispose();
		if (createArtifactPackageGroupItemProvider != null) createArtifactPackageGroupItemProvider.dispose();
		if (updateArtifactElementItemProvider != null) updateArtifactElementItemProvider.dispose();
		if (deleteArtifactElementItemProvider != null) deleteArtifactElementItemProvider.dispose();
		if (createArtifactItemProvider != null) createArtifactItemProvider.dispose();
		if (createActivityItemProvider != null) createActivityItemProvider.dispose();
		if (createEventItemProvider != null) createEventItemProvider.dispose();
		if (createParticipantItemProvider != null) createParticipantItemProvider.dispose();
		if (createTechniqueItemProvider != null) createTechniqueItemProvider.dispose();
		if (createResourceItemProvider != null) createResourceItemProvider.dispose();
		if (createPropertyItemProvider != null) createPropertyItemProvider.dispose();
		if (createArtifactAssetRelationshipItemProvider != null) createArtifactAssetRelationshipItemProvider.dispose();
		if (updatePropertyPurposeItemProvider != null) updatePropertyPurposeItemProvider.dispose();
		if (updateArtifactAssetRelationshipSourceItemProvider != null) updateArtifactAssetRelationshipSourceItemProvider.dispose();
		if (updateArtifactAssetRelationshipTargetItemProvider != null) updateArtifactAssetRelationshipTargetItemProvider.dispose();
		if (updateArtifactVersionItemProvider != null) updateArtifactVersionItemProvider.dispose();
		if (updateArtifactDateItemProvider != null) updateArtifactDateItemProvider.dispose();
		if (updateActivityStartTimeItemProvider != null) updateActivityStartTimeItemProvider.dispose();
		if (updateActivityEndTimeItemProvider != null) updateActivityEndTimeItemProvider.dispose();
		if (updateResourceOccurenceItemProvider != null) updateResourceOccurenceItemProvider.dispose();
	}

}
